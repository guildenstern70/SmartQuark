/*
 * The SmartQuark Project
 * Copyright (c) Alessio Saltarin, 2021-23
 * This software is licensed under MIT License
 * See LICENSE
 */

plugins {
    id 'java'
    id 'io.quarkus'
    id "org.jetbrains.kotlin.jvm" version "1.7.22"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.7.22"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.7.22"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "io.quarkus:quarkus-agroal"
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-hibernate-orm-panache-kotlin"
    implementation "io.quarkus:quarkus-jdbc-h2"
    implementation "io.quarkus:quarkus-jdbc-postgresql"
    implementation "io.quarkus:quarkus-kotlin"
    implementation "io.quarkus:quarkus-qute"
    implementation "io.quarkus:quarkus-resteasy"
    implementation "io.quarkus:quarkus-resteasy-jackson"
    implementation "io.quarkus:quarkus-resteasy-qute"
    implementation "io.quarkus:quarkus-smallrye-health"
    implementation "io.quarkus:quarkus-smallrye-openapi"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation 'org.assertj:assertj-core:3.21.0'
    testImplementation "io.rest-assured:kotlin-extensions"
}

group 'net.littlelite.smartquark'
version '0.4.1'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
    annotation("javax.persistence.Entity")
}

noArg {
    annotation("javax.persistence.Entity")
}

test {
    useJUnitPlatform()
    exclude '**/Native*'
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
